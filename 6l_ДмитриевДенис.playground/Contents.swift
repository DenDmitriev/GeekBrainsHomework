import UIKit

//–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞
//–î–º–∏—Ç—Ä–∏–µ–≤ –î–µ–Ω–∏—Å

//1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–π —Ç–∏–ø –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ¬´–æ—á–µ—Ä–µ–¥—å¬ª (queue) c –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤.

//2. –î–æ–±–∞–≤–∏—Ç—å –µ–º—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞, –ø–æ–ª–µ–∑–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–ø—Ä–∏–º–µ—Ä: filter –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤)

//3. * –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π subscript, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å nil –≤ —Å–ª—É—á–∞–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É.



struct Queue<T: Comparable>: CountQueue {

    var persons: [T] = []
    
    var count: Int {
        get {
            print("–°–µ–π—á–∞—Å –¥–ª–∏–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ = \(persons.count)")
            return persons.count
        }
    }
    var target: String
    
    init(persons: [T], target: String) {
        self.persons = persons
        self.target = target
        print("–°–æ–∑–¥–∞–Ω–∞ –æ—á–µ—Ä–µ–¥ –∏–∑ \(persons) –∫ \(target)")
    }
    
    mutating func push(_ person: T) {
        print("–ù–æ–≤—ã–π —á–ª–µ–Ω –æ—á–µ—Ä–µ–¥–∏ \(person) –∫ \(target)")
        persons.append(person)
    }
    mutating func move() -> T {
        print("\(persons.first!) –∑–∞—à–µ–ª –∫ \(target), —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–≤—ã–π \(persons[1])")
        return persons.removeFirst()
    }
    
    func findQueue(_ person: T) -> Int? {
        var index: Int?
        index = persons.firstIndex { (member) -> Bool in
            member == person
        }
        guard index != nil else {
            print("\(person) –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏ –∫ \(target)")
            return nil
        }
        print("\(person) –∏–º–µ–µ—Ç –Ω–æ–º–µ—Ä \(index!+1) –≤ –æ—á–µ—Ä–µ–¥–∏ –∫ \(target)")
        return index
    }
    
    func filter(_ condition: (T) -> Bool ) -> [T] {
        var newArray = [T]()
        for person in persons {
            if condition(person) {
                newArray.append(person)
            }
        }
        print("–ú–∞—Å—Å–∏–≤ \(persons) –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –¥–æ \(newArray)")
        return newArray
    }
    
    func sorted(_ condition: (T, T) -> Bool) -> [T] {
        return persons.sorted { (personA, personB) -> Bool in
            return condition(personA, personB) ? true : false
        }
    }
    
    //–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –º–æ–π —Å–∞–±—Å–∫—Ä–∏–ø—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1 –∞ –Ω–µ —Å 0, –¥–ª—è –æ—Ç–ª–∏—á–∏—è —Å –∫–ª–∞—Å–∏—á–µ—Å–∫–∏–º
    subscript(index: Int) -> T? {
        guard index <= persons.count && index != 0 else {
            print("–û—á–µ—Ä–µ–¥—å –∏–º–µ–µ—Ç –¥–ª–∏–Ω—É \(persons.count) –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1")
            return nil
        }
        let person: T = persons[index-1]
        print("–ü–æ–¥ –Ω–æ–º–µ—Ä–æ–º \(index) –≤ –æ—á–µ—Ä–µ–¥–∏ \(person)")
        return person
    }
}

protocol CountQueue {
    var count: Int { get }
    var target: String { get }
}


var zooQueue = Queue(persons: ["ü¶ä", "üêº", "üê∑"], target: "–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä—É")
zooQueue.push("üêµ")
zooQueue.move()
print(zooQueue)
zooQueue.findQueue("üê∑")
zooQueue.findQueue("ü¶ä")
zooQueue.count
var sortedZooQueue = zooQueue.sorted { $0 < $1 }
print(sortedZooQueue)
print(zooQueue)
zooQueue[1]
zooQueue[5]

print("_____")


var intQueue = Queue(persons: [12,46,31,4,59], target: "–ó–∞–¥–∞—á–µ")
intQueue.push(61)
intQueue.move()
print(intQueue)
intQueue.findQueue(43)
intQueue.findQueue(99)
intQueue.count

var newQueue = intQueue.filter { (person) -> Bool in
    person % 2 == 0
}
print(newQueue)

newQueue = intQueue.filter { $0 % 2 == 1 }
print(newQueue)

newQueue = intQueue.sorted { $0 > $1 }
print(newQueue)

intQueue[2]
intQueue[0]
print("_____")


enum Sport: String {
    case Football = "‚öΩÔ∏è"
    case Basketball = "üèÄ"
    case Rugby = "üèà"
    case Baseball = "‚öæÔ∏è"
    case Volleyball = "üèê"
}

var sportQueue = Queue(persons: [Sport.Football.rawValue, Sport.Baseball.rawValue, Sport.Rugby.rawValue], target: "–ò–≥—Ä–µ")
sportQueue.push(Sport.Volleyball.rawValue)
sportQueue.move()
sportQueue.findQueue(Sport.Rugby.rawValue)
sportQueue.findQueue(Sport.Football.rawValue)
sportQueue.count
print(sportQueue)
var newSportQueue = Queue(persons: sportQueue.sorted { $0 > $1 }, target: "–ò–≥—Ä–µ")
print(newSportQueue)
sportQueue[3]
newSportQueue[3]
print("_____")

